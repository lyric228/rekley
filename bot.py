from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart
from ai import *


ai = Ai()
router = Router()
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
dp.include_router(router)


def check_old(id: str) -> None:
    messages = ai.messages.get(id, [])
    if len(messages) > 1 and messages[-1]["role"] == SYSTEM_ROLE:
        messages.pop()


main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí° –ò–¥–µ–∏ üí°"), KeyboardButton(text="üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß")],
        [KeyboardButton(text="üìù –ó–∞–¥–∞–Ω–∏—è üìù"), KeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö")],
        [KeyboardButton(text="üé® –†–µ—Ñ–µ—Ä–µ–Ω—Å—ã üé®"), KeyboardButton(text="‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)


async def handle_menu_button(msg: Message, button_name: str, prompt: str) -> None:
    chat_id = str(msg.chat.id)
    check_old(chat_id)
    await bot.send_message(chat_id, prompt)
    ai.add_msg(chat_id, SYSTEM_ROLE, f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É {button_name}")


@router.message(CommandStart())
async def handle_start(msg: Message) -> None:
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {msg.chat.first_name}!\n"
        "–Ø ‚Äî –†–µ-–ö–ª–µ–π, –≤–∞—à —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∫–æ–ª–ª–∞–∂–∞. "
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –Ω–æ–≤–æ–º —Ö–æ–±–±–∏ –∏–ª–∏ "
        "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –Ω–∞–π—Ç–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ."
    )
    await msg.answer(welcome_text, reply_markup=main_keyboard)


# Menu button handlers
@router.message(F.text == "üí° –ò–¥–µ–∏ üí°")
async def handle_kb_idea(msg: Message) -> None:
    await handle_menu_button(
        msg,
        "üí° –ò–¥–µ–∏ üí°",
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ç–µ–º–æ–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞? –Ø –≥–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ, "
        "—á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å, —Ç–æ–ª—å–∫–æ –¥–∞–π —Å—Ç–∞—Ä—Ç!"
    )

@router.message(F.text == "üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß")
async def handle_kb_techniques(msg: Message) -> None:
    await handle_menu_button(
        msg,
        "üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß",
        "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –∫–æ–ª–ª–∞–∂ –ø—Ä–æ–¥—É–º–∞–Ω–Ω–µ–µ. "
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    )

@router.message(F.text == "üìù –ó–∞–¥–∞–Ω–∏—è üìù")
async def handle_kb_tasks(msg: Message) -> None:
    await handle_menu_button(
        msg,
        "üìù –ó–∞–¥–∞–Ω–∏—è üìù",
        "–ü—Ä–∞–∫—Ç–∏–∫–∞, –∏ –µ—â—ë —Ä–∞–∑ –ø—Ä–∞–∫—Ç–∏–∫–∞! –í–æ—Ç –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É. "
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    )

@router.message(F.text == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö")
async def handle_kb_materials(msg: Message) -> None:
    await handle_menu_button(
        msg,
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–ø–æ—Å–æ–±–Ω—ã –ø–æ–¥–∞—Ä–∏—Ç—å –Ω–∞–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! "
        "–†–∞—Å—Å–∫–∞–∂–∏, —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
    )

@router.message(F.text == "üé® –†–µ—Ñ–µ—Ä–µ–Ω—Å—ã üé®")
async def handle_kb_references(msg: Message) -> None:
    await handle_menu_button(
        msg,
        "üé® –†–µ—Ñ–µ—Ä–µ–Ω—Å—ã üé®",
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! "
        "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )

@router.message(F.text == "‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®")
async def handle_kb_inspiration(msg: Message) -> None:
    await handle_menu_button(
        msg,
        "‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®",
        "–ò–¥–µ–∏, –ø–æ–¥–±–æ—Ä–∫–∏, –º—É–¥–±–æ—Ä–¥—ã - —Å —ç—Ç–æ–≥–æ —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å. "
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —á—Ç–æ-—Ç–æ –¥–ª—è —Ç–µ–±—è!"
    )


@router.message(F.text)
async def handle_msg(msg: Message) -> None:
    """Handle all text messages not caught by other handlers."""
    try:
        wait_msg = await msg.answer("–î—É–º–∞—é...   (–û—Ç–≤–µ—Ç –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã)")
        answer = await ai.ask(msg.chat.id, msg.text)
        await wait_msg.edit_text(answer)
        
    except TelegramBadRequest as e:
        print(f"Telegram API error: {e}")