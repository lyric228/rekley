from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart
from ai import * # Assuming this imports Ai, SYSTEM_ROLE, SYSTEM_PROMPT, TELEGRAM_BOT_TOKEN, AI_ROLE
import asyncio


ai = Ai()
router = Router()
# Assuming TELEGRAM_BOT_TOKEN is defined in ai.py or elsewhere accessible
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
dp.include_router(router)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí° –ò–¥–µ–∏ üí°"), KeyboardButton(text="üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß")],
        [KeyboardButton(text="üìù –ó–∞–¥–∞–Ω–∏—è üìù"), KeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö")],
        [KeyboardButton(text="üé® –†–µ—Ñ–µ—Ä–µ–Ω—Å—ã üé®"), KeyboardButton(text="‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®")],
        [KeyboardButton(text="üé≠ –ê—Ä—Ç —Ç–µ—Ä–∞–ø–∏—è üé≠")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TherapyStates(StatesGroup):
    WAITING_TIME = State()
    CONFIRM_TASK = State()
    IN_PROGRESS = State()
    GENERATING_TASK = State() # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
therapy_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="15 –º–∏–Ω—É—Ç"), KeyboardButton(text="30 –º–∏–Ω—É—Ç")],
        [KeyboardButton(text="60 –º–∏–Ω—É—Ç"), KeyboardButton(text="–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º")],
        [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

reflection_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
    ],
    resize_keyboard=True
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
therapy_sessions = {}


# Corrected add_msg function based on the original code's intent
def add_msg(id: str, role: str, msg: str):
    if id not in ai.messages:
        # Ensure the first message is the system prompt
        ai.messages[id] = [{"role": SYSTEM_ROLE, "content": SYSTEM_PROMPT}]
    # Append the new message. Use extend or direct append if messages is a list.
    # Assuming ai.messages[id] is a list based on the for loop below.
    ai.messages[id].append({"role": role, "content": msg})


async def handle_menu_button(msg: Message, button_name: str, prompt: str) -> None:
    id = str(msg.chat.id)
    # The original code sent the prompt first, then potentially removed messages
    # and added system messages. This might be inconsistent.
    # Let's stick to the order the diff suggests adding messages:
    # 1. Get current messages
    # 2. Filter/Recreate messages (keeping initial system prompt)
    # 3. Add new system message about menu choice
    # 4. Add AI response
    # 5. Send AI response message
    # 6. Save messages
    msgs = ai.messages.get(id, [])
    # Start new_msgs with the system prompt if it exists, or add it if not
    system_prompt_exists = msgs and msgs[0].get("role") == SYSTEM_ROLE and msgs[0].get("content") == SYSTEM_PROMPT
    new_msgs = [msgs[0]] if system_prompt_exists else [{"role": SYSTEM_ROLE, "content": SYSTEM_PROMPT}]

    # Logic to remove previous "user chose topic" and AI response.
    # This logic seems complex and potentially buggy if history format changes.
    # A simpler approach might be to just append the new system message
    # and AI response, but the original code attempts this removal.
    # Let's replicate the diff's *implied* message structure update,
    # assuming the goal is to replace the previous menu choice context.
    # The diff's `handle_menu_button` logic wasn't shown, but the message
    # handling logic suggests it modifies the message history.
    # The diff's modification happens *after* sending the message, which is unusual.
    # Let's assume the intent is to update the history *before* the next turn.
    # Keeping the structure from the original code provided, which is also unusual (modifying history after sending).

    await bot.send_message(id, prompt, reply_markup=main_keyboard)

    # Replicate the original code's history modification logic after sending
    msgs_after_send = ai.messages.get(id, []) # Get current messages *after* the ask or initial state
    # Re-evaluate the base: Always start with the system prompt.
    new_msgs_filtered = [{"role": SYSTEM_ROLE, "content": SYSTEM_PROMPT}]

    # Append messages from the history, skipping the previous menu context injection
    skip_next_ai = False
    for m in msgs_after_send[1:]: # Start from the second message
        if m.get("role") == SYSTEM_ROLE and m.get("content", "").startswith("–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É"):
            skip_next_ai = True # The next AI message is the response to the old menu choice
            continue
        if skip_next_ai and m.get("role") == AI_ROLE:
            skip_next_ai = False
            continue
        new_msgs_filtered.append(m)
    
    ai.messages[id] = new_msgs_filtered

    # Now add the context for the *current* menu choice and the bot's response
    # Using the corrected add_msg logic
    add_msg(id, SYSTEM_ROLE, f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É {button_name}")
    add_msg(id, AI_ROLE, prompt) # The prompt sent to the user is the AI's "response" to the menu click
    ai.save_messages() # Assuming ai class has save_messages
@router.message(CommandStart())
async def handle_start(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {msg.chat.first_name}!\n"
        "–Ø ‚Äî –†–µ-–ö–ª–µ–π, –≤–∞—à —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∫–æ–ª–ª–∞–∂–∞. "
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –Ω–æ–≤–æ–º —Ö–æ–±–±–∏ –∏–ª–∏ "
        "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –Ω–∞–π—Ç–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ."
    )
    await msg.answer(welcome_text, reply_markup=main_keyboard)

@router.message(F.text == "üí° –ò–¥–µ–∏ üí°")
async def handle_kb_idea(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return
    await handle_menu_button(
        msg,
        "üí° –ò–¥–µ–∏ üí°",
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ç–µ–º–æ–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞? –Ø –≥–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ, "
        "—á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å, —Ç–æ–ª—å–∫–æ –¥–∞–π —Å—Ç–∞—Ä—Ç!"
    )

@router.message(F.text == "üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß")
async def handle_kb_techniques(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return
    await handle_menu_button(
        msg,
        "üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß",
        "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –∫–æ–ª–ª–∞–∂ –ø—Ä–æ–¥—É–º–∞–Ω–Ω–µ–µ. "
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    )

@router.message(F.text == "üìù –ó–∞–¥–∞–Ω–∏—è üìù")
async def handle_kb_tasks(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return
    await handle_menu_button(
        msg,
        "üìù –ó–∞–¥–∞–Ω–∏—è üìù",
        "–ü—Ä–∞–∫—Ç–∏–∫–∞, –∏ –µ—â—ë —Ä–∞–∑ –ø—Ä–∞–∫—Ç–∏–∫–∞! –í–æ—Ç –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É. "
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    )

@router.message(F.text == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö")
async def handle_kb_materials(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return
    await handle_menu_button(
        msg,
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–ø–æ—Å–æ–±–Ω—ã –ø–æ–¥–∞—Ä–∏—Ç—å –Ω–∞–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! "
        "–†–∞—Å—Å–∫–∞–∂–∏, —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
    )

@router.message(F.text == "üé® –†–µ—Ñ–µ—Ä–µ–Ω—Å—ã üé®")
async def handle_kb_references(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return
    await handle_menu_button(
        msg,
        "üé® –†–µ—Ñ–µ—Ä–µ–Ω—Å—ã üé®",
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! "
        "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )

@router.message(F.text == "‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®")
async def handle_kb_inspiration(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return
    await handle_menu_button(
        msg,
        "‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®",
        "–ò–¥–µ–∏, –ø–æ–¥–±–æ—Ä–∫–∏, –º—É–¥–±–æ—Ä–¥—ã - —Å —ç—Ç–æ–≥–æ —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å. "
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —á—Ç–æ-—Ç–æ –¥–ª—è —Ç–µ–±—è!"
    )

@router.message(F.text == "üé≠ –ê—Ä—Ç —Ç–µ—Ä–∞–ø–∏—è üé≠")
async def handle_kb_art_therapy(msg: Message, state: FSMContext):
    current_fsm_state = await state.get_state()
    if current_fsm_state == TherapyStates.GENERATING_TASK: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–∏ —É–∂–µ
        return
    # –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –∫–∞–∫–æ–º-—Ç–æ –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–∏–∏, –Ω–µ –Ω—É–∂–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫
    # –ù–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –∏–ª–∏ –º—ã –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WAITING_TIME
    if current_fsm_state is None or current_fsm_state not in [TherapyStates.WAITING_TIME, TherapyStates.CONFIRM_TASK, TherapyStates.IN_PROGRESS]:
        await state.set_state(TherapyStates.WAITING_TIME)

    await msg.answer(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:",
        reply_markup=therapy_keyboard
    )

@router.message(TherapyStates.WAITING_TIME, F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def handle_therapy_back_to_menu(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

@router.message(TherapyStates.WAITING_TIME, F.text.in_(["15 –º–∏–Ω—É—Ç", "30 –º–∏–Ω—É—Ç", "60 –º–∏–Ω—É—Ç", "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º"]))
async def handle_therapy_time(msg: Message, state: FSMContext):
    duration_text = msg.text

    await msg.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ...", reply_markup=ReplyKeyboardRemove())
    await state.set_state(TherapyStates.GENERATING_TASK) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    try:
        duration = 0
        if "15 –º–∏–Ω—É—Ç" == duration_text:
            duration = 15
        elif "30 –º–∏–Ω—É—Ç" == duration_text:
            duration = 30
        elif "60 –º–∏–Ω—É—Ç" == duration_text:
            duration = 60

        await state.update_data(duration=duration, duration_text=duration_text)

        # Assuming ai.generate_therapy_task exists and works
        task = await ai.generate_therapy_task(str(msg.chat.id), duration_text)
        await state.update_data(current_task=task)

        await state.set_state(TherapyStates.CONFIRM_TASK) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await msg.answer(
            f"üé® –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{task}\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
                ],
                resize_keyboard=True
            )
        )
    except Exception as e:
        print(f"Error during therapy task generation for chat {msg.chat.id}: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –µ—â–µ —Ä–∞–∑.", reply_markup=therapy_keyboard)
        await state.set_state(TherapyStates.WAITING_TIME) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏


@router.message(TherapyStates.CONFIRM_TASK, F.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def handle_change_task(msg: Message, state: FSMContext):
    data = await state.get_data()
    duration_text = data.get('duration_text', "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º") # Fallback if not set, though it should be

    await msg.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...", reply_markup=ReplyKeyboardRemove())
    await state.set_state(TherapyStates.GENERATING_TASK)

    try:
        # Assuming ai.generate_therapy_task exists and works
        new_task = await ai.generate_therapy_task(str(msg.chat.id), duration_text)
        await state.update_data(current_task=new_task)

        await state.set_state(TherapyStates.CONFIRM_TASK)
        await msg.answer(
            f"üîÑ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{new_task}\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
                ],
                resize_keyboard=True
            )
        )
    except Exception as e:
        print(f"Error during therapy task generation for chat {msg.chat.id}: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
                ],
                resize_keyboard=True
            ))
        await state.set_state(TherapyStates.CONFIRM_TASK)


@router.message(TherapyStates.CONFIRM_TASK, F.text == "‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def handle_start_task(msg: Message, state: FSMContext):
    data = await state.get_data()
    await state.set_state(TherapyStates.IN_PROGRESS)

    duration = data.get('duration', 0)
    if duration > 0:
        await msg.answer(
            f"‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç!",
            # –ó–∞–º–µ–Ω—è–µ–º ReplyKeyboardRemove –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ")]],
                resize_keyboard=True,
                one_time_keyboard=True # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
            )
        )

        therapy_sessions[str(msg.chat.id)] = asyncio.create_task(
            finish_therapy_session(msg.chat.id, duration, state)
        )
    else:
        await msg.answer(
            "üïäÔ∏è –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–≤–æ—Ä–∏ —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é")]],
                resize_keyboard=True
            )
        )

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é" (–¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
@router.message(TherapyStates.IN_PROGRESS, F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é")
async def handle_finish_free_mode_session(msg: Message, state: FSMContext):
    await finish_session(str(msg.chat.id), state)

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ" (–¥–ª—è —Ç–∞–π–º–µ—Ä–∞)
@router.message(TherapyStates.IN_PROGRESS, F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ")
async def handle_early_timer_finish(msg: Message, state: FSMContext):
    await finish_session(str(msg.chat.id), state)


@router.message(TherapyStates.CONFIRM_TASK, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def handle_cancel_task(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_keyboard
    )

async def finish_therapy_session(chat_id: int, duration: int, state: FSMContext):
    await asyncio.sleep(duration * 60)
    # Check if the state is still IN_PROGRESS before finishing
    # This prevents finishing if the user manually cancelled or finished early
    current_state = await state.get_state()
    if current_state == TherapyStates.IN_PROGRESS:
        await finish_session(str(chat_id), state)

async def finish_session(chat_id_str: str, state: FSMContext):
    chat_id = int(chat_id_str)
    if chat_id_str in therapy_sessions:
        therapy_sessions[chat_id_str].cancel()
        del therapy_sessions[chat_id_str]

    await state.set_state(None) # As per diff, clears only state, not data immediately.
    try:
        await bot.send_message(
            chat_id,
            "–£—Ö, —Ç—ã! –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–ª–µ—Ç–µ–ª–æ –≤—Ä–µ–º—è. –•–æ—á–µ—à—å –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å?",
            reply_markup=reflection_keyboard
        )
    except TelegramBadRequest as e:
        print(f"Error sending message in finish_session to {chat_id}: {e}")
        # Potentially send to main_keyboard if reflection_keyboard causes issues or user blocked bot
        try:
            await bot.send_message(chat_id, "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_keyboard)
        except Exception as final_e:
            print(f"Error sending final message to {chat_id}: {final_e}")


@router.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def handle_reflection(msg: Message, state: FSMContext):
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–π, –ª—É—á—à–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é.
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –Ω–æ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É.
    # Check if the user is actually expected to provide reflection input,
    # i.e., if the state was just cleared from IN_PROGRESS
    # This is tricky without a specific reflection state.
    # For now, we rely on the state.clear() happening *after* this check and logic.
    # If a state like TherapyStates.AWAITING_REFLECTION was used after IN_PROGRESS,
    # this handler could be tied to that state.

    if msg.text == "–î–∞":
        reflection_prompt = "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º—É –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é"
        # Assuming ai.ask exists and works
        reflection_question = await ai.ask(str(msg.chat.id), reflection_prompt)
        await msg.answer(f"–û—Ç–ª–∏—á–Ω–æ! {reflection_question}", reply_markup=main_keyboard)
    else:
        await msg.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏–µ —Å–æ –º–Ω–æ–π! –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ)", reply_markup=main_keyboard)

    await state.clear() # Clear the state after handling reflection
@router.message(F.text)
async def handle_msg(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–∏–∏,
    # –≥–¥–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–ª—è —á–µ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ (—Å–µ–π—á–∞—Å —Ç–∞–∫–∏—Ö –Ω–µ—Ç, –Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ)
    current_fsm_state = await state.get_state()
    # If we are in one of these states, the text might be meant for that state's
    # handler (e.g., a custom duration in WAITING_TIME, though not implemented).
    # Since no specific text handlers exist for these states besides the buttons,
    # letting it fall through to ai.ask might be the desired behavior
    # for unhandled text input within these states, but it's potentially confusing.
    # A better approach might be to add specific handlers for F.text in those states
    # that inform the user they need to use the buttons.
    if current_fsm_state in [TherapyStates.WAITING_TIME, TherapyStates.CONFIRM_TASK, TherapyStates.IN_PROGRESS]:
        # If the text is not one of the specific buttons handled by other handlers
        # within these states, it will reach here.
        # For now, process it via ai.ask, but acknowledge this is a potential UX point.
        pass


    id = str(msg.chat.id)

    try:
        wait_msg = await msg.answer("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", reply_markup=main_keyboard)
        # Assuming ai.ask exists and works
        answer = await ai.ask(id, msg.text)

        await wait_msg.delete()
        await msg.answer(answer, reply_markup=main_keyboard)

    except Exception as e:
        print(f"Error in chat {id}: {e}")
        await msg.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard)

# Assuming main() or run_bot() function is defined elsewhere to start the dispatcher
# Example:
# async def main():
#     await dp.start_polling(bot)
#
# if __name__ == "__main__":
#     asyncio.run(main())
