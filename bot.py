from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile, InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Dispatcher, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from logging import warn, error, info
from os.path import join, exists
from ai import *
import asyncio


ai = Ai()
router = Router()
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
dp.include_router(router)

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí° –ò–¥–µ–∏ üí°"), KeyboardButton(text="üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß")],
        [KeyboardButton(text="üìù –ó–∞–¥–∞–Ω–∏—è üìù"), KeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö")],
        [KeyboardButton(text="üé≠ –ê—Ä—Ç —Ç–µ—Ä–∞–ø–∏—è üé≠"), KeyboardButton(text="‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
)

class TherapyStates(StatesGroup):
    WAITING_TIME = State()
    CONFIRM_TASK = State()
    IN_PROGRESS = State()
    GENERATING_TASK = State()

therapy_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="15 –º–∏–Ω—É—Ç"), KeyboardButton(text="30 –º–∏–Ω—É—Ç")],
        [KeyboardButton(text="60 –º–∏–Ω—É—Ç"), KeyboardButton(text="–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º")],
        [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

reflection_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–î–∞"),
            KeyboardButton(text="–ù–µ—Ç"),
        ],
    ],
    resize_keyboard=True,
)

therapy_sessions = {}


def add_msg(id: str, role: str, msg: str):
    if id not in ai.messages:
        ai.messages[id] = [{"role": SYSTEM_ROLE, "content": SYSTEM_PROMPT}]
    ai.messages[id].append({"role": role, "content": msg})

async def send_collage_info(msg: Message) -> None:
    media_group = []
    folder_path = "files"
    all_files_found = True
    id = msg.chat.id

    for i in range(10):
        file_path = join(folder_path, f"{i}.jpg")

        if not exists(file_path):
            logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}. –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            all_files_found = False
            break

        photo_file = FSInputFile(file_path)

        if i == 0:
            media_group.append(InputMediaPhoto(media=photo_file, caption=START_TEXT_COLLAGE))
        else:
            media_group.append(InputMediaPhoto(media=photo_file))

    if all_files_found and media_group:
        try:
            await bot.send_media_group(chat_id=id, media=media_group)
            info(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —Å —Ç–µ–∫—Å—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {id}")
        except Exception as e:
            error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –≤ —á–∞—Ç {id}: {e}")
    elif not all_files_found:
        warn("–ù–µ –≤—Å–µ —Ñ–æ—Ç–æ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        warn(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –¥–ª—è —á–∞—Ç–∞ {id} –ø—É—Å—Ç–∞, —Ö–æ—Ç—è –æ—à–∏–±–æ–∫ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ –±—ã–ª–æ.")

async def handle_menu_button(msg: Message, button_name: str, prompt: str) -> None:
    id = str(msg.chat.id)
    msgs = ai.messages.get(id, [])
    system_prompt_exists = msgs and msgs[0].get("role") == SYSTEM_ROLE and msgs[0].get("content") == SYSTEM_PROMPT
    new_msgs = [msgs[0]] if system_prompt_exists else [{"role": SYSTEM_ROLE, "content": SYSTEM_PROMPT}]

    await bot.send_message(id, prompt, reply_markup=main_keyboard)

    msgs_after_send = ai.messages.get(id, [])
    new_msgs_filtered = [{"role": SYSTEM_ROLE, "content": SYSTEM_PROMPT}]
    skip_next_ai = False

    for m in msgs_after_send[1:]:
        if m.get("role") == SYSTEM_ROLE and m.get("content", "").startswith("–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É"):
            skip_next_ai = True
            continue
        if skip_next_ai and m.get("role") == AI_ROLE:
            skip_next_ai = False
            continue
        new_msgs_filtered.append(m)
    
    ai.messages[id] = new_msgs_filtered
    add_msg(id, SYSTEM_ROLE, f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É {button_name}")
    add_msg(id, AI_ROLE, prompt)
    ai.save_messages()

@router.message(CommandStart())
async def handle_start(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {msg.chat.first_name}!\n"
        "–Ø ‚Äî –†–µ-–ö–ª–µ–π, –≤–∞—à —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä –∫–æ–ª–ª–∞–∂–∞. "
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –Ω–æ–≤–æ–º —Ö–æ–±–±–∏ –∏–ª–∏ "
        "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –Ω–∞–π—Ç–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ."
    )

    await msg.answer(welcome_text, reply_markup=main_keyboard)
    await send_collage_info(msg)

@router.message(F.text == "üí° –ò–¥–µ–∏ üí°")
async def handle_kb_idea(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    await handle_menu_button(
        msg,
        "üí° –ò–¥–µ–∏ üí°",
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ç–µ–º–æ–π –¥–ª—è –∫–æ–ª–ª–∞–∂–∞? –Ø –≥–æ—Ç–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ, "
        "—á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å, —Ç–æ–ª—å–∫–æ –¥–∞–π —Å—Ç–∞—Ä—Ç!"
    )

@router.message(F.text == "üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß")
async def handle_kb_techniques(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    await handle_menu_button(
        msg,
        "üîß –¢–µ—Ö–Ω–∏–∫–∏ üîß",
        "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –∫–æ–ª–ª–∞–∂ –ø—Ä–æ–¥—É–º–∞–Ω–Ω–µ–µ. "
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    )

@router.message(F.text == "üìù –ó–∞–¥–∞–Ω–∏—è üìù")
async def handle_kb_tasks(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    await handle_menu_button(
        msg,
        "üìù –ó–∞–¥–∞–Ω–∏—è üìù",
        "–ü—Ä–∞–∫—Ç–∏–∫–∞, –∏ –µ—â—ë —Ä–∞–∑ –ø—Ä–∞–∫—Ç–∏–∫–∞! –í–æ—Ç –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É. "
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    )

@router.message(F.text == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö")
async def handle_kb_materials(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    await handle_menu_button(
        msg,
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã üìö",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–ø–æ—Å–æ–±–Ω—ã –ø–æ–¥–∞—Ä–∏—Ç—å –Ω–∞–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! "
        "–†–∞—Å—Å–∫–∞–∂–∏, —Å —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
    )

@router.message(F.text == "‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®")
async def handle_kb_inspiration(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    await handle_menu_button(
        msg,
        "‚ú® –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ ‚ú®",
        "–ò–¥–µ–∏, –ø–æ–¥–±–æ—Ä–∫–∏, –º—É–¥–±–æ—Ä–¥—ã - —Å —ç—Ç–æ–≥–æ —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å. "
        "–î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —á—Ç–æ-—Ç–æ –¥–ª—è —Ç–µ–±—è!"
    )

@router.message(F.text == "üé≠ –ê—Ä—Ç —Ç–µ—Ä–∞–ø–∏—è üé≠")
async def handle_kb_art_therapy(msg: Message, state: FSMContext):
    current_fsm_state = await state.get_state()
    if current_fsm_state == TherapyStates.GENERATING_TASK:
        return
    if current_fsm_state is None or current_fsm_state not in [TherapyStates.WAITING_TIME, TherapyStates.CONFIRM_TASK, TherapyStates.IN_PROGRESS]:
        await state.set_state(TherapyStates.WAITING_TIME)

    await msg.answer(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:",
        reply_markup=therapy_keyboard
    )

@router.message(TherapyStates.WAITING_TIME, F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def handle_therapy_back_to_menu(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)

@router.message(TherapyStates.WAITING_TIME, F.text.in_(["15 –º–∏–Ω—É—Ç", "30 –º–∏–Ω—É—Ç", "60 –º–∏–Ω—É—Ç", "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º"]))
async def handle_therapy_time(msg: Message, state: FSMContext):
    duration_text = msg.text

    await msg.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞–Ω–∏–µ...", reply_markup=ReplyKeyboardRemove())
    await state.set_state(TherapyStates.GENERATING_TASK)

    try:
        duration = 0
        if "15 –º–∏–Ω—É—Ç" == duration_text:
            duration = 15
        elif "30 –º–∏–Ω—É—Ç" == duration_text:
            duration = 30
        elif "60 –º–∏–Ω—É—Ç" == duration_text:
            duration = 60

        await state.update_data(duration=duration, duration_text=duration_text)

        id = str(msg.chat.id)
        prompt_for_task = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {duration_text}. –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –∏–ª–∏ –∏–¥–µ—é –¥–ª—è –∫–æ–ª–ª–∞–∂–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
        if duration_text == "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º":
            prompt_for_task = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≥–ª—É–±–æ–∫–æ–µ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–µ–¥–ª–æ–∂–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ç–µ–º—É –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é."
        
        task = await ai.ask(id, prompt_for_task)
        await state.update_data(current_task=task)

        await state.set_state(TherapyStates.CONFIRM_TASK)
        await msg.answer(
            f"üé® –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{task}\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
                ],
                resize_keyboard=True
            )
        )
    except Exception as e:
        warn(f"Error during therapy task generation for chat {msg.chat.id}: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –µ—â–µ —Ä–∞–∑.", reply_markup=therapy_keyboard)
        await state.set_state(TherapyStates.WAITING_TIME)


@router.message(TherapyStates.CONFIRM_TASK, F.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def handle_change_task(msg: Message, state: FSMContext):
    data = await state.get_data()
    duration_text = data.get("duration_text", "–°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º")

    await msg.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...", reply_markup=ReplyKeyboardRemove())
    await state.set_state(TherapyStates.GENERATING_TASK)

    try:
        new_task = await ai.generate_therapy_task(str(msg.chat.id), duration_text)
        await state.update_data(current_task=new_task)

        await state.set_state(TherapyStates.CONFIRM_TASK)
        await msg.answer(
            f"üîÑ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{new_task}\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
                ],
                resize_keyboard=True
            )
        )

    except Exception as e:
        warn(f"Error during therapy task generation for chat {msg.chat.id}: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
                    [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")],
                ],
                resize_keyboard=True
            ))
        await state.set_state(TherapyStates.CONFIRM_TASK)


@router.message(TherapyStates.CONFIRM_TASK, F.text == "‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def handle_start_task(msg: Message, state: FSMContext):
    data = await state.get_data()
    await state.set_state(TherapyStates.IN_PROGRESS)

    duration = data.get("duration", 0)
    id = msg.chat.id

    if duration > 0:
        await msg.answer(
            f"‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )

        therapy_sessions[str(id)] = asyncio.create_task(
            finish_therapy_session(id, duration, state)
        )
    else:
        await msg.answer(
            "üïäÔ∏è –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–≤–æ—Ä–∏ —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é")]],
                resize_keyboard=True
            )
        )

@router.message(TherapyStates.IN_PROGRESS, F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é")
async def handle_finish_free_mode_session(msg: Message, state: FSMContext):
    await finish_session(str(msg.chat.id), state)

@router.message(TherapyStates.IN_PROGRESS, F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ")
async def handle_early_timer_finish(msg: Message, state: FSMContext):
    await finish_session(str(msg.chat.id), state)


@router.message(TherapyStates.CONFIRM_TASK, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def handle_cancel_task(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_keyboard
    )

async def finish_therapy_session(chat_id: int, duration: int, state: FSMContext):
    await asyncio.sleep(duration * 60)
    current_state = await state.get_state()

    if current_state == TherapyStates.IN_PROGRESS:
        await finish_session(str(chat_id), state)

async def finish_session(chat_id_str: str, state: FSMContext):
    chat_id = int(chat_id_str)
    if chat_id_str in therapy_sessions:
        therapy_sessions[chat_id_str].cancel()
        del therapy_sessions[chat_id_str]

    await state.set_state(None)
    try:
        await bot.send_message(
            chat_id,
            "–£—Ö, —Ç—ã! –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–ª–µ—Ç–µ–ª–æ –≤—Ä–µ–º—è. –•–æ—á–µ—à—å –ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å?",
            reply_markup=reflection_keyboard
        )
    except TelegramBadRequest as e:
        warn(f"Error sending message in finish_session to {chat_id}: {e}")
        try:
            await bot.send_message(chat_id, "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_keyboard)
        except Exception as final_e:
            warn(f"Error sending final message to {chat_id}: {final_e}")


@router.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def handle_reflection(msg: Message, state: FSMContext):
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    if msg.text == "–î–∞":
        id = str(msg.chat.id)
        await msg.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å—ã...")
        reflection_prompt = "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º—É –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é"
        reflection_question = await ai.ask(id, reflection_prompt)
        await msg.answer(f"–û—Ç–ª–∏—á–Ω–æ! {reflection_question}", reply_markup=main_keyboard)
    else:
        await msg.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏–µ —Å–æ –º–Ω–æ–π! –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ)", reply_markup=main_keyboard)

    await state.clear()
@router.message(F.text)
async def handle_msg(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == TherapyStates.GENERATING_TASK:
        return

    current_fsm_state = await state.get_state()

    id = str(msg.chat.id)

    try:
        wait_msg = await msg.answer("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", reply_markup=main_keyboard)
        answer = await ai.ask(id, msg.text)

        await wait_msg.delete()
        await msg.answer(answer, reply_markup=main_keyboard)

    except Exception as e:
        warn(f"Error in chat {id}: {e}")
        await msg.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=main_keyboard)